exec("""\nZ='%0*x'\nV='rb'\nW='wb'\nX=input\nY=bin\nQ=True\nR=False\nS='utf-8'\nO=ValueError\nK=Exception\nL=open\nM=print\nI='1'\nJ='0'\nH=''\nG=int\nF=bytes\nE=bytearray\nD=None\nC=range\nA=len\nimport os,sys,math as a,struct,array,random as N,heapq as T,binascii as P,logging as B,paq,zlib as U\nfrom datetime import datetime as b\nfrom typing import List,Dict,Tuple,Optional,Union\nfrom enum import Enum as c\nB.basicConfig(level=B.INFO,format='%(asctime)s - %(levelname)s - %(message)s')\ns='PAQJP_3'\nh=9\nt=65536<<h\ni=1024\nd=[A for A in C(2,256)if all(A%B!=0 for B in C(2,G(A**.5)+1))]\nclass u(c):DEFAULT=0;JPEG=1;EXE=2;TEXT=3\nclass v(c):COMPRESS=0;DECOMPRESS=1\nclass w:\n	def __init__(A,s=H):A.data=E(s.encode(S))\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data+=E(C-A(B.data))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def c_str(A):return A.data.decode(S)\n	def __iadd__(A,s):A.data+=s.encode(S);return A\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __str__(A):return A.data.decode(S)\nclass e:\n	def __init__(A,size=0,initial_value=0):A.data=array.array('B',[initial_value]*size)\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data.extend([0]*(C-A(B.data)))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __len__(B):return A(B.data)\nclass j:\n	def __init__(A,size=0):A.size_=size;A.data=e(size);A.pos=0\n	def setsize(B,size):\n		A=size\n		if A>0 and A&A-1==0:B.size_=A;B.data.resize(A)\n	def __getitem__(A,index):return A.data[index&A.size_-1]\n	def __call__(A,i):return A.data[A.pos-i&A.size_-1]\n	def size(A):return A.size_\nx=j()\nclass f:\n	def __init__(A,left=D,right=D,symbol=D):A.left=left;A.right=right;A.symbol=symbol\n	def is_leaf(A):return A.left is D and A.right is D\nclass k:\n	def __init__(A):A.table=[[1,2,0,0],[3,5,1,0],[4,6,0,1],[7,10,2,0],[8,12,1,1],[9,13,1,1],[11,14,0,2],[15,19,3,0],[16,23,2,1],[17,24,2,1],[18,25,2,1],[20,27,1,2],[21,28,1,2],[22,29,1,2],[26,30,0,3],[31,33,4,0],[32,35,3,1],[32,35,3,1],[32,35,3,1],[32,35,3,1],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[36,39,1,3],[36,39,1,3],[36,39,1,3],[36,39,1,3],[38,40,0,4],[41,43,5,0],[42,45,4,1],[42,45,4,1],[44,47,3,2],[44,47,3,2],[46,49,2,3],[46,49,2,3],[48,51,1,4],[48,51,1,4],[50,52,0,5],[53,43,6,0],[54,57,5,1],[54,57,5,1],[56,59,4,2],[56,59,4,2],[58,61,3,3],[58,61,3,3],[60,63,2,4],[60,63,2,4],[62,65,1,5],[62,65,1,5],[50,66,0,6],[67,55,7,0],[68,57,6,1],[68,57,6,1],[70,73,5,2],[70,73,5,2],[72,75,4,3],[72,75,4,3],[74,77,3,4],[74,77,3,4],[76,79,2,5],[76,79,2,5],[62,81,1,6],[62,81,1,6],[64,82,0,7],[83,69,8,0],[84,76,7,1],[84,76,7,1],[86,73,6,2],[86,73,6,2],[44,59,5,3],[44,59,5,3],[58,61,4,4],[58,61,4,4],[60,49,3,5],[60,49,3,5],[76,89,2,6],[76,89,2,6],[78,91,1,7],[78,91,1,7],[80,92,0,8],[93,69,9,0],[94,87,8,1],[94,87,8,1],[96,45,7,2],[96,45,7,2],[48,99,2,7],[48,99,2,7],[88,101,1,8],[88,101,1,8],[80,102,0,9],[103,69,10,0],[104,87,9,1],[104,87,9,1],[106,57,8,2],[106,57,8,2],[62,109,2,8],[62,109,2,8],[88,111,1,9],[88,111,1,9],[80,112,0,10],[113,85,11,0],[114,87,10,1],[114,87,10,1],[116,57,9,2],[116,57,9,2],[62,119,2,9],[62,119,2,9],[88,121,1,10],[88,121,1,10],[90,122,0,11],[123,85,12,0],[124,97,11,1],[124,97,11,1],[126,57,10,2],[126,57,10,2],[62,129,2,10],[62,129,2,10],[98,131,1,11],[98,131,1,11],[90,132,0,12],[133,85,13,0],[134,97,12,1],[134,97,12,1],[136,57,11,2],[136,57,11,2],[62,139,2,11],[62,139,2,11],[98,141,1,12],[98,141,1,12],[90,142,0,13],[143,95,14,0],[144,97,13,1],[144,97,13,1],[68,57,12,2],[68,57,12,2],[62,81,2,12],[62,81,2,12],[98,147,1,13],[98,147,1,13],[100,148,0,14],[149,95,15,0],[150,107,14,1],[150,107,14,1],[108,151,1,14],[108,151,1,14],[100,152,0,15],[153,95,16,0],[154,107,15,1],[108,155,1,15],[100,156,0,16],[157,95,17,0],[158,107,16,1],[108,159,1,16],[100,160,0,17],[161,105,18,0],[162,107,17,1],[108,163,1,17],[110,164,0,18],[165,105,19,0],[166,117,18,1],[118,167,1,18],[110,168,0,12],[169,105,20,0],[170,117,19,1],[118,171,1,19],[110,172,0,20],[173,105,21,0],[174,117,20,1],[118,175,1,20],[110,176,0,21],[177,105,22,0],[178,117,21,1],[118,179,1,21],[110,180,0,22],[181,115,23,0],[182,117,22,1],[118,183,1,22],[120,184,0,23],[185,115,24,0],[186,127,23,1],[128,187,1,23],[120,188,0,24],[189,115,25,0],[190,127,24,1],[128,191,1,24],[120,192,0,25],[193,115,26,0],[194,127,25,1],[128,195,1,25],[120,196,0,26],[197,115,27,0],[198,127,26,1],[128,199,1,26],[120,200,0,27],[201,115,28,0],[202,127,27,1],[128,203,1,27],[120,204,0,28],[205,115,29,0],[206,127,28,1],[128,207,1,28],[120,208,0,29],[209,125,30,0],[210,127,29,1],[128,211,1,29],[130,212,0,30],[213,125,31,0],[214,137,30,1],[138,215,1,30],[130,216,0,31],[217,125,32,0],[218,137,31,1],[138,219,1,31],[130,220,0,32],[221,125,33,0],[222,137,32,1],[138,223,1,32],[130,224,0,33],[225,125,34,0],[226,137,33,1],[138,227,1,33],[130,228,0,34],[229,125,35,0],[230,137,34,1],[138,231,1,34],[130,232,0,35],[233,125,36,0],[234,137,35,1],[138,235,1,35],[130,236,0,36],[237,125,37,0],[238,137,36,1],[138,239,1,36],[130,240,0,37],[241,125,38,0],[242,137,37,1],[138,243,1,37],[130,244,0,38],[245,135,39,0],[246,137,38,1],[138,247,1,38],[140,248,0,39],[249,135,40,0],[250,69,39,1],[80,251,1,39],[140,252,0,40],[249,135,41,0],[250,69,40,1],[80,251,1,40],[140,252,0,41]]\n	def nex(A,state,sel):return A.table[state][sel]\ny=k()\ndef l(dt=D):\n	C=dt\n	if C is D:C=b.now()\n	H=C.second;I=C.minute;J=C.hour;K=C.weekday();L=C.month;M=C.day;G=C.year\n	if not(0<=H<=59 and 0<=I<=59 and 0<=J<=23 and 0<=K<=6 and 1<=L<=12 and 1<=M<=31 and 0<=G<=4095):B.error('Invalid date/time values for encoding');raise O('Date/time values out of range')\n	A=E();A.append(H);A.append(I);A.append(J);A.append(K);A.append(L);A.append(M);A.append(G//256);A.append(G%256);A.append(0);return F(A)\ndef m(data):\n	D='Decoded date/time values out of range';C=data\n	if A(C)<9:B.error('Insufficient data for datetime decoding');raise O('Data too short for datetime decoding')\n	E=C[0];F=C[1];G=C[2];H=C[3];I=C[4];J=C[5];K=C[6]<<8|C[7];L=C[8]\n	if not(0<=E<=59 and 0<=F<=59 and 0<=G<=23 and 0<=H<=6 and 1<=I<=12 and 1<=J<=31 and 0<=K<=4095 and L==0):B.error(D);raise O(D)\n	return E,F,G,H,I,J,K\ndef n(data,repeat=1000):\n	G=repeat;B=E(data)\n	for D in d:\n		H=D if D==2 else max(1,a.ceil(D/2/G))\n		for J in C(G):\n			for I in C(0,A(B),3):B[I]^=H\n	return F(B)\ndef o(data,chunk_size=4):\n	B=chunk_size;D=E()\n	for G in C(0,A(data),B):H=data[G:G+B];D.extend([A^255 for A in H])\n	return F(D)\ndef g(n):\n	if n<2:return R\n	if n==2:return Q\n	if n%2==0:return R\n	for A in C(3,G(n**.5)+1,2):\n		if n%A==0:return R\n	return Q\ndef z(n):\n	A=0\n	while Q:\n		if g(n-A):return n-A\n		if g(n+A):return n+A\n		A+=1\ndef quit(message=D):\n	A=message\n	if A:M(A)\n	sys.exit(1)\ndef A0(x):\n	if x<0:return 0\n	A=0\n	while x>0:x>>=1;A+=1\n	return A\ndef q(d,n=12,repeat=1000):\n	B=(1<<n)-1;A=d\n	for E in C(repeat):\n		if A>2047:A=B\n		if A<-2047:A=0\n		D=(1<<n)/(1+a.exp(-A/512.));A=G(D);A=min(max(A,0),B)\n	return A\ndef A1(p):\n	A=e(4096);B=0\n	for D in C(-2047,2048):\n		E=q(D)\n		for F in C(B,E+1):A[F]=D\n		B=E+1\n	A[4095]=2047;return A[p]\ndef hash(*B):C=B[0]*200002979+B[1]*30005491+(B[2]if A(B)>2 else 4294967295)*50004239+(B[3]if A(B)>3 else 4294967295)*70004807+(B[4]if A(B)>4 else 4294967295)*110002499;return C^C>>9^B[0]>>2^B[1]>>3^(B[2]if A(B)>2 else 0)>>4^(B[3]if A(B)>3 else 0)>>5^(B[4]if A(B)>4 else 0)>>6\nclass p:\n	def __init__(A):A.compressor=D;A.PRIMES=d;A.seed_tables=A.generate_seed_tables();A.max_intersections=28\n	def generate_seed_tables(D,num_tables=126,table_size=256,min_val=5,max_val=255,seed=42):\n		N.seed(seed);A=[]\n		for E in C(num_tables):B=[N.randint(min_val,max_val)for A in C(table_size)];A.append(B)\n		return A\n	def get_seed(B,table_idx,value):\n		C=table_idx\n		if 0<=C<A(B.seed_tables):return B.seed_tables[C][value%A(B.seed_tables[C])]\n		return 0\n	def binary_to_file(N,binary_data,filename):\n		D=binary_data\n		try:\n			E=G(D,2);F=(A(D)+7)//8;C=Z%(F*2,E)\n			if A(C)%2!=0:C=J+C\n			H=P.unhexlify(C)\n			with L(filename,W)as I:I.write(H)\n			return Q\n		except K as M:B.error(f"Error saving file: {str(M)}");return R\n	def file_to_binary(H,filename):\n		try:\n			with L(filename,V)as D:\n				C=D.read()\n				if not C:B.error('Error: Empty file');return\n				E=Y(G(P.hexlify(C),16))[2:];return E.zfill(A(C)*8)\n		except K as F:B.error(f"Error reading file: {str(F)}");return\n	def calculate_frequencies(C,binary_str):\n		A={}\n		for B in binary_str:A[B]=A.get(B,0)+1\n		return A\n	def build_huffman_tree(H,frequencies):\n		B=[(B,f(symbol=A))for(A,B)in frequencies.items()];T.heapify(B)\n		while A(B)>1:C,D=T.heappop(B);E,F=T.heappop(B);G=f(left=D,right=F);T.heappush(B,(C+E,G))\n		return B[0][1]\n	def generate_huffman_codes(D,root,current_code=H,codes={}):\n		C=current_code;B=codes;A=root\n		if A.is_leaf():B[A.symbol]=C or J;return B\n		if A.left:D.generate_huffman_codes(A.left,C+J,B)\n		if A.right:D.generate_huffman_codes(A.right,C+I,B)\n		return B\n	def compress_data_huffman(B,binary_str):\n		C=binary_str\n		if not C:return H\n		D=B.calculate_frequencies(C);E=B.build_huffman_tree(D);A=B.generate_huffman_codes(E)\n		if J not in A:A[J]=J\n		if I not in A:A[I]=I\n		F=H.join(A[B]for B in C);return F\n	def decompress_data_huffman(B,compressed_str):\n		C=compressed_str\n		if not C:return H\n		F=B.calculate_frequencies(C);G=B.build_huffman_tree(F);I=B.generate_huffman_codes(G);D={B:A for(A,B)in I.items()};E=H;A=H\n		for J in C:\n			A+=J\n			if A in D:E+=D[A];A=H\n		return E\n	def compress_data_zlib(C,data_bytes):\n		try:return U.compress(data_bytes)\n		except U.error as A:B.error(f"zlib compression error: {A}");return\n	def decompress_data_zlib(C,compressed_data):\n		try:return U.decompress(compressed_data)\n		except U.error as A:B.error(f"zlib decompression error: {A}");return\n	def transform_01(A,data):return n(data,repeat=1)\n	def reverse_transform_01(A,data):return A.transform_01(data)\n	def transform_03(A,data):return o(data)\n	def reverse_transform_03(A,data):return A.transform_03(data)\n	def transform_04(G,data,repeat=50):\n		B=E(data)\n		for H in C(repeat):\n			for D in C(A(B)):B[D]=(B[D]-D%256)%256\n		return F(B)\n	def reverse_transform_04(G,data,repeat=50):\n		B=E(data)\n		for H in C(repeat):\n			for D in C(A(B)):B[D]=(B[D]+D%256)%256\n		return F(B)\n	def transform_05(H,data,shift=3):\n		G=shift;B=E(data)\n		for D in C(A(B)):B[D]=(B[D]<<G|B[D]>>8-G)&255\n		return F(B)\n	def reverse_transform_05(H,data,shift=3):\n		G=shift;B=E(data)\n		for D in C(A(B)):B[D]=(B[D]>>G|B[D]<<8-G)&255\n		return F(B)\n	def transform_06(H,data,seed=42):\n		N.seed(seed);D=list(C(256));N.shuffle(D);B=E(data)\n		for G in C(A(B)):B[G]=D[B[G]]\n		return F(B)\n	def reverse_transform_06(J,data,seed=42):\n		N.seed(seed);G=list(C(256));N.shuffle(G);H=[0]*256\n		for(B,I)in enumerate(G):H[I]=B\n		D=E(data)\n		for B in C(A(D)):D[B]=H[D[B]]\n		return F(D)\n	def paq_compress(A,data):return paq.compress(data)\n	def paq_decompress(A,data):return paq.decompress(data)\n	def compress_with_best_method(C,data):\n		E=data;T=b(2025,7,14,13,56,0);U=l(T);V=[(1,C.transform_04),(2,C.transform_01),(3,C.transform_03),(5,C.transform_05),(6,C.transform_06)];W=[('paq',C.paq_compress),('zlib',C.compress_data_zlib)];H=D;I=float('inf');J=D;L=D\n		for(O,X)in V:\n			Z=X(E)\n			for(Q,a)in W:\n				try:\n					M=a(Z)\n					if M is D:continue\n					R=A(M)\n					if R<I:I=R;H=M;J=O;L=Q\n				except K as c:B.warning(f"Compression method {Q} with transform {O} failed: {c}");continue\n		if A(E)<i:\n			d=Y(G(P.hexlify(E),16))[2:].zfill(A(E)*8);S=C.compress_data_huffman(d);N=G(S,2).to_bytes((A(S)+7)//8,'big')\n			if A(N)<I:I=A(N);H=N;J=4;L='huffman'\n		if H is D:B.error('All compression methods failed.');return\n		B.info(f"Best compression method: {L}, Marker: {J}");return F([J])+U+H\n	def decompress_with_best_method(C,data):\n		I=data;F=b''\n		if A(I)<10:B.error('Empty or insufficient compressed data.');return F\n		E=I[0];S=I[1:10];L=I[10:]\n		try:T,U,V,W,X,a,b=m(S);B.info(f"Decoded datetime: {b}-{X:02d}-{a:02d} {V:02d}:{U:02d}:{T:02d}, Day of week: {W}")\n		except O as H:B.error(f"Datetime decoding failed: {H}");return F\n		Q={1:C.reverse_transform_04,2:C.reverse_transform_01,3:C.reverse_transform_03,5:C.reverse_transform_05,6:C.reverse_transform_06}\n		if E==4:\n			c=Y(G(P.hexlify(L),16))[2:].zfill(A(L)*8);R=C.decompress_data_huffman(c)\n			if not R:B.error('Huffman decompression failed.');return F\n			try:\n				d=(A(R)+7)//8;M=Z%(d*2,G(R,2))\n				if A(M)%2!=0:M=J+M\n				return P.unhexlify(M)\n			except K as H:B.error(f"Error converting decompressed Huffman data: {H}");return F\n		if E not in Q:B.error(f"Unknown compression method marker: {E}");raise O(f"Unknown compression method marker: {E}")\n		try:N=C.paq_decompress(L);return Q[E](N)\n		except K as H:B.warning(f"PAQ decompression failed: {H}. Trying zlib...")\n		N=C.decompress_data_zlib(L)\n		if N is D:B.error('All decompression methods failed.');return F\n		return Q[E](N)\ndef r():\n	M('PAQJP_3 Compression System');M('Created by Jurijus Pacalovas.');M('Options:');M('1 - Compress file (PAQJP_3 with transformations and datetime)');M('2 - Decompress file (PAQJP_3 with transformations and datetime)');Q=p()\n	try:\n		G=X('Enter 1 or 2: ').strip()\n		if G not in(I,'2'):B.error('Invalid choice. Exiting.');return\n	except EOFError:B.info('No input detected. Defaulting to Compress (1).');G=I\n	C=X('Input file name: ').strip();E=X('Output file name: ').strip()\n	if not os.path.isfile(C):B.error(f"Error: Input file '{C}' does not exist.");return\n	if G==I:\n		with L(C,V)as H:J=H.read()\n		N=Q.compress_with_best_method(J)\n		if N is D:return\n		with L(E,W)as O:O.write(N)\n		P=os.path.getsize(C);F=A(N);R=F/P*100 if P>0 else 0;B.info(f"Compression successful. Output saved to {E}. Size: {F} bytes");B.info(f"Original: {P} bytes, Compressed: {F} bytes, Ratio: {R:.2f}%")\n	elif G=='2':\n		with L(C,V)as H:J=H.read()\n		try:\n			S=Q.decompress_with_best_method(J)\n			with L(E,W)as O:O.write(S)\n			F=os.path.getsize(C);T=os.path.getsize(E);B.info(f"Decompression successful. Output saved to {E}.");B.info(f"Compressed: {F} bytes, Decompressed: {T} bytes")\n		except K as U:B.error(f"Error during decompression: {U}")\nif __name__=='__main__':r()\n""")
